#!/bin/bash
# 2009 Paul Mansfield
# License:  GPL, http://www.gnu.org/copyleft/gpl.html

action=$1
shift

if [ "$action" = "usage" ]; then
    echo "    $(basename $0) [TERM...]"
    echo "      Show tasks containing TERM, grouped by project, and displayed in"
    echo "      priority order. If no TERM provided, displays entire todo.txt."
    echo ""
    exit
fi

original_TODOTXT_VERBOSE=$TODOTXT_VERBOSE
TODOTXT_VERBOSE=0

# Show projects in alphabetical order and tasks in priority order. 
let projectCnt=0
tasks=

# Find all projects. 
readonly projects=$("$TODO_FULL_SH" command listproj "$@")

# For each project show header and the list of tasks. 
export HIDE_PROJECTS_SUBSTITUTION='[[:space:]][+][[:graph:]]\{1,\}' # Omitting all projects from the list. 
for project in $projects; do 
    # Use core _list function, does numbering and coloring for us. 
    projectList=$(_list "$TODO_FILE" "$project\( \|$\)" "$@")
    if [ "$projectList" ]; then # Even though we're operating only on project tasks containing TERM, a task filter may still filter away all tasks for a project. 
        echo "--- ${project#+} ---"
        echo "${projectList}"
        echo ""

        if [ "$original_TODOTXT_VERBOSE" -gt 0 ]; then
            let projectCnt+=1
            tasks="${tasks}${tasks:+
}$projectList"
        fi
    fi
done

# Show tasks not associated to a project. 
projectList=$(_list "$TODO_FILE" "-[[:space:]][+][[:graph:]]" "$@")
if [ "${projectList}" ]; then
    echo "--- Not in projects ---"
    echo "${projectList}"
fi

if [ "$original_TODOTXT_VERBOSE" -gt 0 ]; then
    let taskCnt=$(echo "$tasks" | sort -u | sed -n '$ =')

    echo "--"
    if [ $projectCnt -gt 0 ]; then
        echo "TODO: $taskCnt task(s) in $projectCnt projects."
    else
        echo "TODO: No projects found."
    fi
fi

#!/bin/bash
###############################################################################
##
# FILE:         did
# PRODUCT:      todo.txt-cli-ex
# AUTHOR:       Ingo Karkat <ingo@karkat.de>
# DATE CREATED: 07-Jan-2011
#
###############################################################################
# CONTENTS:
#
# REMARKS:
#
# COPYRIGHT: (C) 2010-2012 Ingo Karkat
#   This program is free software; you can redistribute it and/or modify it
#   under the terms of the GNU General Public License.
#   See http://www.gnu.org/copyleft/gpl.txt
#
# @(#)did	001	(24-Feb-2012)	todo.txt-cli-ex
###############################################################################

action=$1
shift

[ "$action" = "usage" ] && {
    echo "    $(basename $0) ITEM#[, ITEM#, ITEM#, ...] [on] DATE [COMMENT]"
    echo "      Marks task(s) on line ITEM# as done at DATE in todo.txt,"
    echo "      optionally appending COMMENT."
    echo "      Task(s) that were dependent on ITEM# have that blocker removed."
    echo ""
    exit
}

errmsg="usage: $TODO_SH $(basename $0) ITEM#[, ITEM#, ITEM#, ...] [on] DATE [COMMENT]"
[ $# -eq 0 ] && die "$errmsg"

items=
while [[ "$1" =~ ^[,0-9]+$ ]]
do
    items="$items $1"
    shift
done
[ "$items" ] || die "$errmsg"

[ "$1" = "on" ] && shift
[ "$1" ] || die "$errmsg"
doneDate=$(date -d "$1" +%F) || exit 1
shift

printf '' > ~/.todo-lastdone
for item in ${items//,/ }
do 
    if [ $# -gt 0 ]; then
        "$TODO_FULL_SH" command append $item "$@" || exit $?
    fi

    # We could delegate to the built-in 'do' followed by 'replace', but the
    # 'replace' command doesn't handle done tasks, and may do surprising things
    # to existing priorities and dates. This also would have confusing output. 
    getTodo "$item"
    # Do not check if this item has already been done; this allows
    # retroactive changes to the done date. 
    # remove priority once item is done
    sed -i.bak $item"s/^(.) //" "$TODO_FILE"
    sed -i.bak $item's|^\(x [0-9]\{2,4\}-[0-9]\{2\}-[0-9]\{2\} \)\{0,1\}|'"x $doneDate |" "$TODO_FILE"
    if [ $TODOTXT_VERBOSE -gt 0 ]; then
        getNewtodo "$item"
        echo "$item $newtodo"
        echo "TODO: $item marked as done on $doneDate."
    fi
    printf '%s ' $item >> ~/.todo-lastdone

    if [ -x "$TODO_ACTIONS_DIR/unwait" ]; then
        # Unblock tasks that depended on the now done task. 
        "$TODO_FULL_SH" unwait 'for' $item | grep -v '^TODO: No tasks that contain the dependent tasks found.$'
        : # Always exit with a successful exit code even when the command complained. 
    fi

    if [ -x "$TODO_ACTIONS_DIR/recur" ]; then
        "$TODO_FULL_SH" recur $item apply
        : # Always exit with a successful exit code even when the command complained. 
    fi
done

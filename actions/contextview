#!/bin/bash
# 2009 Paul Mansfield
# License:  GPL, http://www.gnu.org/copyleft/gpl.html

action=$1
shift

if [ "$action" = "usage" ]; then
    echo "    $(basename $0) [-a] [TERM...]"
    echo "      Show open (and closed with -a) tasks containing TERM, grouped by context,"
    echo "      and displayed in priority order."
    echo "      If no TERM provided, displays entire todo.txt."
    echo ""
    exit
fi

makeTaskCounts()
{
    if [ "$additional_filter_command" ]; then
        # Just count them; done tasks have already been filtered away. 
        sed -n '$ ='
    else
        awk '
function highlight(colorVar,      color) {
    color = ENVIRON[colorVar]
    gsub(/\\+033/, "\033", color)
    return color
}
BEGIN {
    openCnt = 0
    doneCnt = 0
}
/[0-9]+ x / {
    netTask = substr($0, length(highlight("COLOR_DONE")) + 1)
    if (match(netTask, /^[0-9]+ x /)) {
        doneCnt++
        next
    }
}
{ openCnt++ }
END {
    print openCnt (doneCnt > 0 ? "/" doneCnt : "")
}
'
    fi
}

# Configuration to only summarize many unassociated tasks. 
: ${TODOTXT_CONTEXTVIEW_UNASSOCIATED_THRESHOLD:=10}

original_TODOTXT_VERBOSE=$TODOTXT_VERBOSE
TODOTXT_VERBOSE=0

additional_filter_command="grep -ve '^ *[0-9]\+ x ' | "
if [ "$1" == '-a' ]; then
    shift
    additional_filter_command=
fi

# Show contexts in alphabetical order and tasks in priority order. 
let contextCnt=0
tasks=

# Find all contexts. 
readonly contexts=$(eval "$(filtercommand 'cat "$TODO_FILE"' '' "$@")" | grep -o '[^ ]*@[^ ]\+' | grep '^@' | sort -u)

# For each context show header and the list of tasks. 
export HIDE_CONTEXTS_SUBSTITUTION='[[:space:]]@[[:graph:]]\{1,\}'   # Omitting all contexts from the list. 
for context in $contexts; do 
    # Use core _list function, does numbering and coloring for us. 
    post_filter_command="${additional_filter_command}grep '$context\\( \\|$\\)'"
    contextList=$(_list "$TODO_FILE" "$@")
    if [ "$contextList" ]; then # Even though we're operating only on context tasks containing TERM, a task filter may still filter away all tasks for a context. 
        taskCounts=$(echo "${projectList}" | makeTaskCounts)
        [ $contextCnt -gt 0 ] && echo ""
        echo "--- ${context} ($taskCounts) ---"
        echo "${contextList}"

        if [ "$original_TODOTXT_VERBOSE" -gt 0 ]; then
            let contextCnt+=1
            tasks="${tasks}${tasks:+
}$contextList"
        fi
    fi
done

# Show tasks not associated with a context 
unassociatedCnt=0
post_filter_command="${additional_filter_command}grep -ve '[[:space:]]@[[:graph:]]'"
contextList=$(_list "$TODO_FILE" "$@")
if [ "$contextList" ]; then
    unassociatedCnt=$(echo "$contextList" | sed -n '$ =')
    unassociatedCounts=$(echo "${contextList}" | makeTaskCounts)
    if [ $unassociatedCnt -le $TODOTXT_CONTEXTVIEW_UNASSOCIATED_THRESHOLD ]; then
        [ $contextCnt -gt 0 ] && echo ""
        echo "--- Without context ($unassociatedCounts) ---"
        echo "${contextList}"
    fi
fi

if [ "$original_TODOTXT_VERBOSE" -gt 0 ]; then
    let taskCnt=$(echo "$tasks" | sort -u | sed -n '$ =')

    echo "--"
    if [ $contextCnt -gt 0 ]; then
        echo "TODO: $taskCnt task(s) with $contextCnt contexts."
    else
        echo "TODO: No contexts found."
    fi

    if [ $unassociatedCnt -gt $TODOTXT_CONTEXTVIEW_UNASSOCIATED_THRESHOLD ]; then
        echo "TODO: $unassociatedCounts task(s) without context."
    fi
fi

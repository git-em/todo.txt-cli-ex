#!/bin/bash

action=$1
shift

[ "$action" = "usage" ] && {
    echo "    $(basename $0) ITEM#[, ITEM#, ITEM#, ...]"
    echo "      Puts the task(s) on line ITEM# into trash.txt."
    echo ""
    exit
}

shopt -s extglob
errmsg="usage: $TODO_SH $(basename $0) ITEM#[, ITEM#, ITEM#, ...]"

TRASH_FILE=${TRASH_FILE:-$TODO_DIR/trash.txt}
BASE=$(basename "$TRASH_FILE")
PREFIX=$(echo ${BASE%%.[^.]*} | tr [a-z] [A-Z])

[ $# -eq 0 ] && die "$errmsg"
# Split multiple trash's, if comma separated change to whitespace separated
# Loop the 'trash' function for each item
for item in `echo $* | tr ',' ' '`; do 
    [ -z "$item" ] && die "$errmsg"
    [[ "$item" = +([0-9]) ]] || die "$errmsg"

    todo=$(sed "$item!d" "$TODO_FILE")
    [ -z "$todo" ] && die "TODO: No task $item."

    # Check if this item has already been done. 
    if [ $(echo $todo | grep -c "^x ") -eq 0 ]; then
        now=`date '+%Y-%m-%d'`
        # Remove priority once item is trashed. 
        sed -i.bak $item"s/^(.) //" "$TODO_FILE"
        # Add timestamp like the 'do' command. 
        sed -i.bak $item"s|^|$now |" "$TODO_FILE"
        # Move item to trash. 
        sed -e "$item!d" "$TODO_FILE" >> "$TRASH_FILE"
        if [ $TODOTXT_PRESERVE_LINE_NUMBERS = 0 ]; then
            # Delete line (changes line numbers). 
            # Note: Cannot actually remove lines inside the loop, as this may
            # make following task numbers invalid. 
            sed -i.bak -e $item"s/^.*/!DELETED/" "$TODO_FILE"
        else
            # leave blank line behind (preserves line numbers)
            sed -i.bak -e $item"s/^.*//" "$TODO_FILE"
        fi
        if [ $TODOTXT_VERBOSE -gt 0 ]; then
            echo "$item: $todo"
            echo "TODO: $item put into $PREFIX."
        fi
    else
        echo "$item is already marked done."
    fi
done

if [ $TODOTXT_PRESERVE_LINE_NUMBERS = 0 ]; then
    # Finally delete the marked lines; see above. 
    sed -i.bak -e '/^!DELETED$/d' "$TODO_FILE"
fi

#!/bin/bash

action=$1
shift

[ "$action" = "usage" ] && {
    echo "    $(basename $0) ITEM#[, ITEM#, ITEM#, ...] [COMMENT]"
    echo "      Puts the task(s) on line ITEM# into trash.txt, appending COMMENT."
    echo "      Task(s) that were dependent on ITEM# have that blocker removed."
    echo ""
    exit
}

shopt -s extglob
errmsg="usage: $TODO_SH $(basename $0) ITEM#[, ITEM#, ITEM#, ...] [COMMENT]"

TRASH_FILE=${TRASH_FILE:-$TODO_DIR/trash.txt}
BASE=$(basename "$TRASH_FILE")
PREFIX=$(echo ${BASE%%.[^.]*} | tr [a-z] [A-Z])

[ $# -eq 0 ] && die "$errmsg"

cleanup()
{
    if [ $TODOTXT_PRESERVE_LINE_NUMBERS = 0 ]; then
        # Finally delete the marked lines. 
        sed -i.bak -e '/^!DELETED$/d' "$TODO_FILE"
    fi
}
trap 'cleanup' 0

items=
while [[ "$1" =~ ^[,0-9]+$ ]]
do
    items="$items $1"
    shift
done
[ "$items" ] || die "$errmsg"

# Split multiple trash's, if comma separated change to whitespace separated. 
# Loop the 'trash' function for each task. 
for item in $(echo $items | tr ',' ' ')
do 
    if [ $# -gt 0 ]; then
        "$TODO_FULL_SH" command append $item "$@" || exit $?
    fi

    todo=$(sed "$item!d" "$TODO_FILE")
    [ -z "$todo" ] && die "TODO: No task $item."

    # Check if this task has already been done. 
    if [ $(echo $todo | grep -c "^x ") -eq 0 ]; then
        now=$(date '+%Y-%m-%d')
        # Remove priority once task is trashed. 
        sed -i.bak $item"s/^(.) //" "$TODO_FILE"
        # Add timestamp like the 'do' command. 
        sed -i.bak $item"s|^|$now |" "$TODO_FILE"
        # Move task to trash. 
        sed -e "$item!d" "$TODO_FILE" >> "$TRASH_FILE"
        if [ $TODOTXT_PRESERVE_LINE_NUMBERS = 0 ]; then
            # Delete line (changes line numbers). 
            # Note: Cannot actually remove lines inside the loop, as this may
            # make following task numbers invalid. 
            sed -i.bak -e $item"s/^.*/!DELETED/" "$TODO_FILE"
        else
            # leave blank line behind (preserves line numbers)
            sed -i.bak -e $item"s/^.*//" "$TODO_FILE"
        fi
        if [ $TODOTXT_VERBOSE -gt 0 ]; then
            echo "$item: $todo"
            echo "TODO: $item put into $PREFIX."
        fi

        if [ -x "$TODO_ACTIONS_DIR/unwait" ]; then
            # Unblock tasks that depended on the trashed task. 
            "$TODO_FULL_SH" unwait 'for' $item | grep -v '^TODO: No tasks that contain the dependent tasks found.$'
            : # Always exit with a successful exit code even when the command complained. 
        fi
    else
        echo "$item is already marked done."
    fi
done

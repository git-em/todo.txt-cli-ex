#!/bin/bash
###############################################################################
##
# FILE:         defragment
# PRODUCT:      todo.txt-cli-ex
# AUTHOR:       Ingo Karkat <ingo@karkat.de>
# DATE CREATED: 18-Aug-2010
#
###############################################################################
# CONTENTS:
#
# REMARKS:
#
# COPYRIGHT: (C) 2010-2012 Ingo Karkat
#   This program is free software; you can redistribute it and/or modify it
#   under the terms of the GNU General Public License.
#   See http://www.gnu.org/copyleft/gpl.txt
#
# @(#)defragment	001	(24-Feb-2012)	todo.txt-cli-ex
###############################################################################

action=$1
shift

[ "$action" = "usage" ] && {
    echo "    $(basename $0)"
    echo "      Cleans empty lines from todo.txt while adapting cross-task references"
    echo "      of the form m:### or \"task ###\". "
    echo ""
    exit
}

referencePattern='^[[:graph:]]:[0-9]+$'

# Defragment blank lines. 
# Note: Deletion of blank lines must proceed from end to begin to avoid adapting
# remaining line numbers. 
for emptyLineNum in $(sed -n '/./!=' "$TODO_FILE" | tac)
do
    awk -v referencePattern=$referencePattern -v lineNum=$emptyLineNum '
        function adapt(oldNum, oldLength,     newNum) {
            if (oldNum > lineNum) {
                newNum = sprintf("%0" oldLength "d", oldNum - 1)
                return newNum
            } else if (oldNum == lineNum) {
                return "???"
            } else {
                return oldNum
            }
        }
        BEGIN { FS = "[ \t]" }
        NR == lineNum {
            if ($0 == "") {
                next
            } else {
                print "ASSERT: passed line number " lineNum " should be empty!" > "/dev/stderr"
                exit 2
            }
        }
        {
            for (i = 1; i <= NF; ++i) {
                if ($i ~ referencePattern) {
                    match($i, /[0-9]+/)
                    oldNum = substr($i, RSTART, RLENGTH) + 0
                    sub(/[0-9]+/, adapt(oldNum, RLENGTH), $i)
                } else if ($(i - 1) == "task" && $i ~ /^[0-9]+$/) {
                    oldNum = $i + 0
                    $i = adapt(oldNum, length($i))
                }
            }
        }; 1' \
        "$TODO_FILE" > "${TODO_FILE}.bak" && mv "${TODO_FILE}.bak" "${TODO_FILE}" || die "Fatal Error: Unable to process tasks."
done

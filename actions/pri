#!/bin/bash

action=$1
shift

[ "$action" = "usage" ] && {
    echo "    $(basename $0) PRIORITY|none [on DATE|DATE-] [until DATE|-DATE] ITEM#[, ITEM#, ...]"
    echo "    $(basename $0) ITEM# PRIORITY|none [on DATE|DATE-] [until DATE|-DATE]"
    echo "      Adds PRIORITY to task(s) on line ITEM#, or deprioritizes with none."
    echo "      With DATE-, priorization will only happen on DATE (via A:DATE)."
    echo "      With -DATE, the task will stay prioritized until DATE (via d:DATE)."
    echo "      Remove a (de-)priorization on DATE via priority=none."
    echo ""
    exit
}

shopt -s extglob

errmsg="usage: $TODO_SH $(basename $0) PRIORITY|none [on DATE|DATE-] [until DATE|-DATE] ITEM#[, ITEM#, ITEM#, ...]"
beginDate=
endDate=
makeDate()
{
    date -d "$1" +%F
}
checkDates()
{
    while [ $# -gt 0 ]
    do
	case "$1" in
	    on)	    beginDate=$(makeDate "$2") || exit 1; shift; shift;;
	    [^-]*-) beginDate=$(makeDate "${1%-}") || exit 1; shift;;
	    until)  endDate=$(makeDate "$2") || exit 1; shift; shift;;
	    -*[^-]) endDate=$(makeDate "${1#-}") || exit 1; shift;;
	    *)	    break;;
	esac
    done
    items=$*
}
datePri()
{
    local marker=$1
    local date=$2

    getTodo "$item"

    if [ "$marker" = 'NONE' ]; then
	# Remove any (de-)priorizations for the same date. 
	newtodo=$(echo "$todo" | sed -e "s| [dA-Z]:${date}||") || exit 1
    else
	# Remove any (de-)priorizations for the same date. 
	# Replace existing date-priorization with the same priority in-place or
	# append new date-priorization. 
	newtodo=$(echo "$todo" | sed -e "s| [dA-Z]:${date}||" | sed -e "s| ${marker}:\([0-9]\{2,4\}[^A-Za-z0-9]\)\{2\}[0-9]\{2,4\}| ${marker}:${date}|" -e t -e "s| *\$| ${marker}:${date}|") || exit 1
    fi

    input=$newtodo
    cleaninput "for sed"
    sed -i.bak "$item s|^.*|${input}|" "$TODO_FILE"
}

if [[ "$1" = [a-zA-Z] || "$1" = 'none' ]]; then
    pri=$1
    shift
    checkDates "$@"
elif [[ $# -ge 2 && ( "$2" = [a-zA-Z] || "$2" = 'none' ) ]]; then
    item=$1
    shift
    pri=$1
    shift
    checkDates "$@"
    items=$item
else
    die "$errmsg"
fi
[ "$items" ] || die "$errmsg"
newpri=$( printf "%s\n" "$pri" | tr 'a-z' 'A-Z' )

for item in $(echo $items | tr ',' ' '); do 
    whenwhat=
    [[ "$item" = +([0-9]) ]] || die "$errmsg"

    if [ "$beginDate" ]; then
	if [ "$pri" = "none" ]; then
	    whenwhat="will be not be prioritized on $beginDate"
	else
	    whenwhat="will be prioritized ($newpri) on $beginDate"
	fi
	datePri "$newpri" "$beginDate"

	if [ "$endDate" ]; then
	    whenwhat="${whenwhat}, until $endDate"
	    datePri "d" "$endDate"
	fi
    else
	if [ "$pri" = "none" ]; then
	    action='depri'
	    newpri=''
	else
	    action='pri'
	fi

	# Call back to the main script to prioritize each task. 
	if [ "$endDate" ]; then
	    if [ "$pri" = 'none' ]; then
		whenwhat="will not be deprioritized on $endDate"
		datePri 'NONE' "$endDate"
	    else
		TODOTXT_VERBOSE=0 "$TODO_FULL_SH" command $action $item $newpri
		whenwhat="prioritized ($newpri) until $endDate"
		datePri 'd' "$endDate"
	    fi
	else
	    "$TODO_FULL_SH" command $action $item $newpri
	fi
    fi
    
    if [ "$whenwhat" ]; then
	if [ "$newtodo" = "$todo" ]; then
	    [ $TODOTXT_VERBOSE -gt 0 ] && echo "$item $newtodo"
	    die "TODO: Priorization didn't change."
	elif [ $TODOTXT_VERBOSE -gt 0 ]; then
	    echo "$item $newtodo"
	    echo "TODO: $item $whenwhat."
	fi
    fi
done

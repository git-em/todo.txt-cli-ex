#!/bin/bash
# 2009 Matt Brubeck
# License:  GPL, http://www.gnu.org/copyleft/gpl.html

action=$1
shift

[ "$action" = "usage" ] && { 
    echo "    $(basename $0) [ITEM#] [SRC]"
    echo "      Open ITEM# in \$TODO_DIR/SRC in \$EDITOR for editing."
    echo "      If ITEM# is omitted, the entire file is edited."
    echo "      If BASENAME is not given, defaults to 'todo'."
    echo "      ITEM# can be removed by deleting the line."
    echo "      Additional tasks can be added by appending more lines."
    echo ""
    exit
}

item=
if [[ "$1" =~ ^[0-9]+$ ]]; then
    # We got an ITEM#. 
    item=$1
    shift
fi
FILE=$TODO_DIR/${1:-todo}.txt

if [ ! "$item" ]; then
    # Edit entire file. 
    exec "$EDITOR" "$FILE"
fi


# Edit single task. 

TMPEDIT="${TEMP:-/tmp}/todo-edit.$$.txt"
# Retrieve task without priority. 
EDITME=$(sed -e "$item!d" -e "$item s/^(.) //" "$FILE")
[ -z "$EDITME" ] && die "TODO: No task $item." 
echo "$EDITME" > "$TMPEDIT"

TMPMODTIME=$(stat -c %Y "$TMPEDIT")
"$EDITOR" "$TMPEDIT" || { echo 2>&1 "Unclean exit of editor; aborting!"; exit $?; }
NEWMODTIME=$(stat -c %Y "$TMPEDIT")

if [ $NEWMODTIME -eq $TMPMODTIME ]; then
    echo "No changes done."
    exit 0
fi

newContent=$(head -n 1 "$TMPEDIT")
if [ -z "$newContent" ]; then
    # We don't need to ask for confirmation here, the "del" command will take
    # care of that. 
    "$TODO_FULL_SH" command del $item
elif [ "$newContent" = "$EDITME" ]; then
    echo "No changes done to original line."
else
    case "$newContent" in
        "x "*)
            # The 'replace' command doesn't handle done tasks. 
            newContent=$(echo "$newContent" | sed 's/\&/\\\&/g')
            sed -i.bak "$item s|^.*|${newContent}|" "$TODO_FILE"
            echo "$item $EDITME"
            echo "TODO: Replaced task with:"
            echo "$item $newContent"
            ;;
        *)
            "$TODO_FULL_SH" command replace $item "$newContent";;
    esac
fi

numLines=$(grep -cve '^\s*$' "$TMPEDIT")
if [ $numLines -gt 1 ]; then
    if  [ $TODOTXT_FORCE = 0 ]; then
        echo
        if [ $numLines -eq 2 ]; then
            echo "There is one additional line. Add it as another task? (y/n)"
        else
            echo "There are $((numLines - 1)) additional lines. Add them as individual tasks? (y/n)"
        fi
        read ANSWER
    else
        ANSWER="y"
    fi
    if [ "$ANSWER" = "y" ]; then
        TMPCONF=$TODOTXT_CFG_FILE
        if [[ $TODOTXT_DATE_ON_ADD = 1 ]]; then
            # The additional lines should be added as-is. 
            # We have to amend the config in order to override a "date on add"
            # setting located there. 
            TMPCONF=$(mktemp --tmpdir "todo-$(basename -- "$0")-XXXXXX" 2>/dev/null || echo "/tmp/todo-$(basename -- "$0")-$$")
            cat > "$TMPCONF" <<-EOF
                source "$TODOTXT_CFG_FILE"
                export TODOTXT_DATE_ON_ADD=0
EOF
        fi

        IFS=$'\n'
        sed -e '1d' -e '/^[ \t]*$/d' "$TMPEDIT" | while IFS=$'\n' read newtask
        do
            "$TODO_FULL_SH" -d "$TMPCONF" command add "$newtask"
        done

        rm "$TMPCONF"
    fi
fi

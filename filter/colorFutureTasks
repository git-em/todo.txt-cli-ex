#!/bin/bash
export TODOTXT_FILTER_FUTURE_TASKS=${TODOTXT_FILTER_FUTURE_TASKS:-1}

if [ $TODOTXT_PLAIN -eq 0 ]; then
    if [ ${TERM_COLORS:-0} -ge 256 ]; then
        export COLOR_DUE_FUTURE=${COLOR_DUE_FUTURE-$DEFAULT'\\033[48;5;195m'}
        export COLOR_DUE_TODAY=${COLOR_DUE_TODAY-$DEFAULT'\\033[48;5;190m'}
        export COLOR_DUE_1DAY=${COLOR_DUE_1DAY-$DEFAULT'\\033[48;5;193m'}
        export COLOR_DUE_2DAY=${COLOR_DUE_2DAY-$DEFAULT'\\033[48;5;230m'}
        export COLOR_DUE_3DAY=${COLOR_DUE_3DAY-$DEFAULT'\\033[48;5;229m'}
        export COLOR_DUE_1WEEK=${COLOR_DUE_1WEEK-$DEFAULT'\\033[48;5;186m'}
        export COLOR_DUE_2WEEK=${COLOR_DUE_2WEEK-$DEFAULT'\\033[48;5;178m'}
        export COLOR_DUE_OLDEST=${COLOR_DUE_OLDEST-$DEFAULT'\\033[48;5;138m'}

        export COLOR_LATEST_FUTURE=${COLOR_LATEST_FUTURE-$DEFAULT'\\033[48;5;196m'}
        export COLOR_LATEST_TODAY=${COLOR_LATEST_TODAY-$DEFAULT'\\033[48;5;202m'}
        export COLOR_LATEST_1DAY=${COLOR_LATEST_1DAY-$DEFAULT'\\033[48;5;208m'}
        export COLOR_LATEST_2DAY=${COLOR_LATEST_2DAY-$DEFAULT'\\033[48;5;214m'}
        export COLOR_LATEST_3DAY=${COLOR_LATEST_3DAY-$DEFAULT'\\033[48;5;220m'}
    else
        export COLOR_DUE_TODAY=${COLOR_DUE_TODAY-$DEFAULT'\\033[42m'}
        export COLOR_DUE_3DAY=${COLOR_DUE_3DAY-$DEFAULT'\\033[43m'}
        export COLOR_DUE_2WEEK=${COLOR_DUE_2WEEK-$DEFAULT'\\033[47m'}
        export COLOR_DUE_OLDEST=${COLOR_DUE_OLDEST-$DEFAULT'\\033[40m'}

        export COLOR_LATEST_FUTURE=${COLOR_LATEST_FUTURE-$DEFAULT'\\033[01;37;41m'}
        export COLOR_LATEST_TODAY=${COLOR_LATEST_TODAY-$DEFAULT'\\033[37;41m'}
        export COLOR_LATEST_3DAY=${COLOR_LATEST_3DAY-$DEFAULT'\\033[43m'}
    fi

    awk --re-interval -v date=$1 '
function getThreshold(date) {
    if (date == "") {
        return mktime(strftime("%Y %m %d 00 00 00", systime()))
    } else {
        return mktime(gensub(/([0-9]{4})-([0-9]{2})-([0-9]{2})/, "\\1 \\2 \\3 00 00 00", "", date))
    }
}
function highlight(colorVar,      color) {
    color = ENVIRON[colorVar]
    gsub(/\\+033/, "\033", color)
    return color
}
function highlightend(colorVar, defaultColor,      color) {
    color = highlight(colorVar "_END")
    if (color == "") {
        return defaultColor
    } else {
        return color
    }
}
function getLineColor(      hl) {
    if (match($0, /[0-9]+ /) > 1) {
        return substr($0, 1, RSTART - 1)
    } else {
        return highlight("DEFAULT")
    }
}
function getSpanClass(daySpan, what,      class) {
    # We do not want the fallback to older span classes for future due dates, so
    # they are handled specially. 
    if (daySpan < 0) {
        class = "COLOR_" what "_FUTURE"
        return (ENVIRON[class] == "" ? "" : class)
    }

    # Find the bucket where the span falls into... 
    for (i = 1; i <= spanNum; i++) {
        if (daySpan < spanNumbers[i])
            break
    }

    # ...then find the next bucket for which an actual color definition actually
    # exists, looking into progressively larger spans of time. (I.e. if there is
    # no special highlighting for "due in 3 days", we use the highlighting for
    # "due in 1 week" instead.) 
    for (j = i; j <= spanNum + 1; j++) {
        class = "COLOR_" what "_" spanNames[j]
        if (ENVIRON[class] != "")
            return class
    }
}
BEGIN {
    spanNum =   split("         1    2    3     7    14    21     30     60     91   365   730  1095   1461", spanNumbers)
                split("TODAY 1DAY 2DAY 3DAY 1WEEK 2WEEK 3WEEK 1MONTH 2MONTH 3MONTH 1YEAR 2YEAR 3YEAR OLDEST", spanNames)

    threshold = getThreshold(date)
}
# Existing line highlightings (i.e. prioritized or done tasks) have precedence
# over any time-based rules. 
{
    lineColor = getLineColor()
    netTask = substr($0, length(lineColor) + 1)
    if (match(netTask, /^[0-9]+ x /)) {
        # Do not process done tasks. 
        print
        next
    }
}
# Highlight tasks with a latest date. This has precedence over a due date. 
/ T:[0-9]{4}-[0-9]{2}-[0-9]{2}/ {
    date = mktime(gensub(/^.* T:([0-9]{4})-([0-9]{2})-([0-9]{2}).*$/, "\\1 \\2 \\3 00 00 00", ""))

    # Highlight tasks with a latest date, depending on how long until the date. 
    daySpan = int((date - threshold) / 86400)
    latestClass = getSpanClass(daySpan, "LATEST")
    if (lineColor == highlight("DEFAULT")) {
        # No existing line color, apply to entire line. 
        lineColor = highlight(latestClass)
        $0 = highlight(latestClass) $0 highlightend(latestClass, highlight("DEFAULT"))
    } else {
        # The line is already colored, only highlight the latest date itself. 
        $0 = gensub(/ (T:[0-9]{4}-[0-9]{2}-[0-9]{2})/, " " highlight(latestClass) "\\1" highlightend(latestClass, lineColor), "")
    }
}
# Filter out tasks due in the future, highlight the time since tasks have become
# due. 
/ t:[0-9]{4}-[0-9]{2}-[0-9]{2}/ {
    date = mktime(gensub(/^.* t:([0-9]{4})-([0-9]{2})-([0-9]{2}).*$/, "\\1 \\2 \\3 00 00 00", ""))
    if (date > threshold && ENVIRON["TODOTXT_FILTER_FUTURE_TASKS"] != 0 ) {
        # Suppress tasks that are scheduled in the future. 
        next
    }

    # Highlight scheduled tasks, depending on how long they are due now. 
    daySpan = int((threshold - date) / 86400)
    dueClass = getSpanClass(daySpan, "DUE")
    if (lineColor == highlight("DEFAULT")) {
        # No existing line color, apply to entire line. 
        lineColor = highlight(dueClass)
        $0 = highlight(dueClass) $0 highlightend(dueClass, highlight("DEFAULT"))
    } else {
        # The line is already colored, only highlight the due date itself. 
        $0 = gensub(/ (t:[0-9]{4}-[0-9]{2}-[0-9]{2})/, " " highlight(dueClass) "\\1" highlightend(dueClass, lineColor), "")
    }
}
{ print }
'
elif [ $TODOTXT_FILTER_FUTURE_TASKS -ne 0 ]; then
    awk --re-interval -v date=$1 '
function getThreshold(date) {
    if (date == "") {
        return mktime(strftime("%Y %m %d 00 00 00", systime()))
    } else {
        return mktime(gensub(/([0-9]{4})-([0-9]{2})-([0-9]{2})/, "\\1 \\2 \\3 00 00 00", "", date))
    }
}
BEGIN {
    threshold = getThreshold(date)
}
/^[0-9]+ x / {
    # Do not process done tasks. 
    print
    next
}
/ t:[0-9]{4}-[0-9]{2}-[0-9]{2}/ {
    date = mktime(gensub(/^.* t:([0-9]{4})-([0-9]{2})-([0-9]{2}).*$/, "\\1 \\2 \\3 00 00 00", ""))
    if (date > threshold) {
        # Suppress tasks that are scheduled in the future. 
        next
    }
}
{ print }
'
else
    cat
fi
